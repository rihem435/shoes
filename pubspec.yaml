name: app
description: A new Flutter project.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: '>=3.1.5 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
    


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2
  bordered_text: ^2.0.0
  text_divider: ^1.0.0
  email_validator: ^2.1.17
     # state management
  flutter_bloc: ^8.1.3
  # code generate code for converting to and from JSON by annotating 
  freezed: ^2.4.6
  freezed_annotation: ^2.4.1
  # for dependency injection
  get_it: ^7.6.4
  # To generate to/from JSON code for a class,
  json_serializable: ^6.7.1
  # Classes and helper functions that support JSON code generation via the `json_serializable` package.
  json_annotation: ^4.8.1
  # Networking
  dio: ^5.4.0
  retrofit: ^4.0.3
  retrofit_generator: ^8.0.4
 
  # Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format. in terminal
  pretty_dio_logger: ^1.3.1
  # localization , translate
  intl: ^0.18.0
  easy_localization: ^3.0.3
  # Customize Flutter's default white native splash screen with background color and splash image. Supports dark mode, full screen, and more.
  flutter_native_splash: ^2.3.7
  flutter_svg: ^2.0.9
  # A flutter plugin for adapting screen and font size.Let your UI display a reasonable layout on different screen sizes!
  flutter_screenutil: ^5.9.0
  #A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.7
  # add injectable to your dependencies  
  injectable:  
  

dev_dependencies:
  flutter_test:
    sdk: flutter
  # add the generator to your dev_dependencies  
  injectable_generator:  

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  fonts:
    - family: Quicksand
      fonts:
        - asset: assets/fonts/Quicksand-Medium.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
